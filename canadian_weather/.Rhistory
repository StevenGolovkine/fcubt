plot(df[,1])
plot(res[1,])
plot(res[,1])
View(res)
colMeans(res)
rowMeans(res)
plot(rowMeans(res))
df <- as.matrix(as.data.frame(rerun(10000, as.vector(bm()))))[-1,]
H <- 0.5
t <- seq(0, 1, length = 101)[-1]
res <- matrix(rep(0, 100*10000), ncol = 10000)
for(i in 1:ncol(df)){
res[,i] <- sigma2(df[,i], t, H, 1, 1/10)
}
plot(rowMeans(res))
mean(rowMeans(res))
res <- matrix(rep(0, 100*10000), ncol = 10000)
for(i in 1:ncol(df)){
res[,i] <- sigma2(df[,i], t, H, 2, 1/10)
}
mean(rowMeans(res))
res <- matrix(rep(0, 100*10000), ncol = 10000)
for(i in 1:ncol(df)){
res[,i] <- sigma2(df[,i], t, H, 3, 1/10)
}
mean(rowMeans(res))
a <- rnorm(1000, 0, 1)
plot(a)
b <- 0.05 * a
plot(b)
var(b)
sd(b)
res <- matrix(rep(0, 100*10000), ncol = 10000)
for(i in 1:ncol(df)){
res[,i] <- sigma2(df[,i], t, H, 0.05, 1/10)
}
mean(rowMeans(res))
res <- matrix(rep(0, 100*10000), ncol = 10000)
for(i in 1:ncol(df)){
res[,i] <- sigma2(df[,i], t, H, 0.1, 1/10)
}
mean(rowMeans(res))
noise <- rnorm(100*10000, 0, 1)
noise <- matrix(rnorm(100*10000, 0, 1), ncol = 10000)
noise[1,]
noise[,1]
plot(noise[1,])
plot(noise[,1])
rowMeans(noise)
plot(rowMeans(noise))
mean(rowMeans(noise))
res_noise <- res * noise
df_noise <- df + res_noise
plot(df_noise[,1])
lines(df[,1], col = 'red')
rowMeans(res_noise)
plot(rowMeans(res_noise))
sd(res_noise[,1])
var(res_noise[,1])
plot(df[,1])
for(i in 1:nrow(res_noise)){
print(var(res_noise[,i]))
}
for(i in 1:nrow(res_noise)){
print(mean(res_noise[,i]))
}
plot(df_noise[,1])
plot(df[,1])
plot(res_noise[,1])
sd(res_noise[1,])
for(i in 1:nrow(res_noise)){
print(sd(res_noise[i,]))
}
for(i in 1:ncol(res_noise)){
print(sd(res_noise[i,]))
}
ncol(res_noise)
res_noise[10000,]
res_noise[9999,]
for(i in 1:ncol(res_noise)){
print(sd(res_noise[,i]))
}
for(i in 1:nrow(res_noise)){
print(sd(res_noise[i,]))
}
plot(res_noise[1,])
standard_dev <- c()
for(i in 1:nrow(res_noise)){
standard_dev <- c(standard_dev, sd(res_noise[i,])))
}
standard_dev <- c()
for(i in 1:nrow(res_noise)){
standard_dev <- c(standard_dev, sd(res_noise[i,]))
}
standard_dev
mean(standard_dev)
standard_dev <- c()
variance <- c()
for(i in 1:nrow(res_noise)){
standard_dev <- c(standard_dev, sd(res_noise[i,]))
variance <- c(variance, var(res_noise[i,]))
}
0.05**2
0.067**2
res <- matrix(rep(0, 100*10000), ncol = 10000)
for(i in 1:ncol(df)){
res[,i] <- sigma2(df[,i], t, H, 0.05, 1/10)
}
mean(rowMeans(res))
noise <- matrix(rnorm(100*10000, 0, 1), ncol = 10000)
res_noise <- res * noise
df_noise <- df + res_noise
standard_dev <- c()
variance <- c()
for(i in 1:nrow(res_noise)){
standard_dev <- c(standard_dev, sd(res_noise[i,]))
variance <- c(variance, var(res_noise[i,]))
}
mean(standard_dev)
mean(variance)
res <- matrix(rep(0, 100*10000), ncol = 10000)
for(i in 1:ncol(df)){
res[,i] <- sigma2(df[,i], t, H, 0.08, 1/10)
}
mean(rowMeans(res))
noise <- matrix(rnorm(100*10000, 0, 1), ncol = 10000)
res_noise <- res * noise
df_noise <- df + res_noise
standard_dev <- c()
variance <- c()
for(i in 1:nrow(res_noise)){
standard_dev <- c(standard_dev, sd(res_noise[i,]))
variance <- c(variance, var(res_noise[i,]))
}
mean(standard_dev)
mean(variance)
0.05**2
res <- matrix(rep(0, 100*10000), ncol = 10000)
for(i in 1:ncol(df)){
res[,i] <- sigma2(df[,i], t, H, 0.075, 1/10)
}
mean(rowMeans(res))
noise <- matrix(rnorm(100*10000, 0, 1), ncol = 10000)
res_noise <- res * noise
df_noise <- df + res_noise
standard_dev <- c()
variance <- c()
for(i in 1:nrow(res_noise)){
standard_dev <- c(standard_dev, sd(res_noise[i,]))
variance <- c(variance, var(res_noise[i,]))
}
mean(standard_dev)
mean(variance)
plot(df_noise[1,])
plot(df_noise[,1])
lines(df_noise[,1], col = 'red')
plot(df_noise[,1])
lines(df[,1], col = 'red')
0.01
1/10
plot(res[,5])
res <- matrix(rep(0, 100*10000), ncol = 10000)
for(i in 1:ncol(df)){
res[,i] <- sigma2(df[,i], t, H, 0.075, 10)
}
plot(res[,5])
res <- matrix(rep(0, 100*10000), ncol = 10000)
for(i in 1:ncol(df)){
res[,i] <- sigma2(df[,i], t, H, 0.075, 1/20)
}
plot(res[,5])
res <- matrix(rep(0, 100*10000), ncol = 10000)
for(i in 1:ncol(df)){
res[,i] <- sigma2(df[,i], t, H, 0.075, 1)
}
plot(res[,5])
noise <- matrix(rnorm(100*10000, 0, 1), ncol = 10000)
res_noise <- res * noise
df_noise <- df + res_noise
standard_dev <- c()
variance <- c()
for(i in 1:nrow(res_noise)){
standard_dev <- c(standard_dev, sd(res_noise[i,]))
variance <- c(variance, var(res_noise[i,]))
}
res <- matrix(rep(0, 100*10000), ncol = 10000)
for(i in 1:ncol(df)){
res[,i] <- sigma2(df[,i], t, H, 0.1, 1)
}
mean(rowMeans(res))
noise <- matrix(rnorm(100*10000, 0, 1), ncol = 10000)
res_noise <- res * noise
df_noise <- df + res_noise
standard_dev <- c()
variance <- c()
for(i in 1:nrow(res_noise)){
standard_dev <- c(standard_dev, sd(res_noise[i,]))
variance <- c(variance, var(res_noise[i,]))
}
plot(res[,1])
mean(standard_dev)
mean(variance)
u <- seq(0, 1, 0.001)
c1 <- seq(0.025, 0.2, 0.025)
c1 <- seq(0.025, 0.2, 0.025)
c2 <- c(0.01, 0.1, 1, 10, 100)
for(i in c1){
for(j in c2){
plot(u, i, j)
}
}
for(i in c1){
print(i)
}
# ----
# Plot phi
par(mfrow=c(8, 5))
u <- seq(0, 1, 0.001)
c1 <- seq(0.025, 0.2, 0.025)
c2 <- c(0.01, 0.1, 1, 10, 100)
for(i in c1){
for(j in c2){
plot(u, i, j)
}
}
u <- seq(0, 1, 0.001)
c1 <- seq(0.025, 0.2, 0.025)
c2 <- c(0.01, 0.1, 1, 10, 100)
for(i in c1){
for(j in c2){
plot(u, phi(u, i, j))
}
}
# ----
# Plot phi
par(mfrow=c(5,8))
u <- seq(0, 1, 0.001)
c1 <- seq(0.025, 0.2, 0.025)
c2 <- c(0.01, 0.1, 1, 10, 100)
for(i in c1){
for(j in c2){
plot(u, phi(u, i, j))
}
}
# ----
# Plot phi
par(mfrow=c(8, 5), mar=c(1, 1, 1, 1))
u <- seq(0, 1, 0.001)
c1 <- seq(0.025, 0.2, 0.025)
c2 <- c(0.01, 0.1, 1, 10, 100)
for(i in c1){
for(j in c2){
plot(u, phi(u, i, j))
}
}
u <- seq(0, 1, 0.001)
c1 <- seq(0.025, 0.2, 0.025)
c2 <- c(0.01, 0.1, 1, 10, 100)
for(i in c1){
for(j in c2){
plot(u, phi(u, i, j))
title(paste(i, j, collapse = ' '))
}
}
par(mfrow=c(1,1))
plot(df_noise[1,])
plot(df_noise[,1])
par(mar=c(0, 0, 0, 0))
plot(df_noise[,1])
par(mar=c(1.5, 1.5, 1.5, 1.5))
plot(df_noise[,1])
par(mar=c(2, 2, 2, 2))
par(mar=c(2.5, 2.5, 2.5, 2.5))
plot(df_noise[,1])
100000
log(10)
1000**2
500000**(1/2)
rnorm(10)
order(rnorm(10))
install.packages('tidyverse')
install.packages('somebm')
install.packages('knitr')
install.packages('devtools')
install.packages('blogdown')
install.packages('xaringan')
iinstall.packages('curveDepth')
install.packages('curveDepth')
library(curveDepth)
vignette(curveDepth)
vignette(package=curveDepth)
vignette(package='curveDepth')
library(curveDepth)
data("mnistShort017")
n <- 10
m <- 50
cst <- 1/10
alp <- 1/8
curves0 <- images2curves(mnistShort017$`0`[,,1:n])
curves1 <- images2curves(mnistShort017$`1`[,,1:n])
plot(curves0)
depthSpace <- matrix(NA, nrow = n * 2, ncol = 2)
depthSpace[, 1] = depthc.Tukey(
c(curves0, curves1), curves0, m = m,
exactEst = TRUE, minMassObj = cst/m^alp)
View(depthSpace)
curves0[0]
curves0[1]
depthSpace[, 2] = depthc.Tukey(
c(curves0, curves1), curves1, m = m,
exactEst = TRUE, minMassObj = cst/m^alp)
View(depthSpace)
remove.packages("denoisr", lib="~/R/x86_64-pc-linux-gnu-library/4.0")
install.packages("~/Documents/workspace/denoisr_1.0.1.tar.gz", repos = NULL, type = "source")
browseVignettes('denoisr')
library(fda)
df <- CanadianWeather
df$place
df$province
unique(df$province)
df$region
unique(df$region)
library(tidyr)
library(tidyverse)
write_csv(df$region, './region.csv')
as.data.frame(df$region)
write_csv(as.data.frame(df$region), './region.csv')
filter
library(fda)
create.bspline.basis(nbasis = 4)
a = create.bspline.basis(nbasis = 4)
plot(a)
a = create.bspline.basis(nbasis = 6)
plot(a)
a = create.bspline.basis(nbasis = 5)
plot(a)
a$basisvalues
a$nbasis
a$rangeval
a = create.bspline.basis(nbasis = 1)
a = create.bspline.basis(nbasis = 2)
a = create.bspline.basis(nbasis = 2, norder = 2)
plot(a)
getbasismatrix(a)
getbasismatrix(basisobj = a)
getbasismatrix(evalarg = range(0, 1), basisobj = a)
getbasismatrix(evalarg = range(0, 1, 0.1), basisobj = a)
RStudio.Version()
RStudio.Version()
library(ggplot2)
library(denoisr)
library(denoisr)
df <- generate_fractional_brownian(1000, 300, 0.5, 0.05)
df_test <- generate_fractional_brownian(1000, 300, 0.5, 0.05)
plot(df[[1]]$t, df[[1]]$x)
lines(df[[1]]$t, df[[1]]$x_true, col = 'red')
H_estim <- estimate_H0_list(df, t0_list = 0.5, k0_list = 14)
L_estim <- estimate_L0_list(df, t0_list = 0.5, H0_list = H_estim, k0_list = 14)
sigma_estim <- estimate_sigma_list(df, t0_list = 0.5, k0_list = 14)
b_estim <- estimate_b_list(df, H0_list = H_estim, L0_list = L_estim, sigma = sigma_estim)
b_estim <- estimate_b_list(df_test, H0_list = H_estim, L0_list = L_estim, sigma = sigma_estim)
b_estim_train <- estimate_b_list(df, H0_list = H_estim, L0_list = L_estim, sigma = sigma_estim)
library(tidyverse)
df_test_smooth <- df_test %>% map2(b_estim, ~ estimate_curve(.x, U = .x$t, b = .y, t0_list = 0.5)
)
plot(df_test[[1]]$t, df_test[[1]]$x)
lines(df_test[[1]]$t, df_test[[1]]$x_true, col = 'red')
lines(df_test_smooth[[1]]$t, df_test_smooth[[1]]$x, col = 'blue')
#### Setting 2
df <- generate_piecewise_fractional_brownian(1000, 1000, H = c(0.4, 0.5, 0.7), sigma = 0.05)
df_test <- generate_piecewise_fractional_brownian(1000, 1000, H = c(0.4, 0.5, 0.7), sigma = 0.05)
H_estim <- estimate_H0_list(df, t0_list = c(1/6, 0.5, 5/6), k0_list = 14)
L_estim <- estimate_L0_list(df, t0_list = c(1/6, 0.5, 5/6), H0_list = H_estim, k0_list = 14)
sigma_estim <- estimate_sigma_list(df, t0_list = c(1/6, 0.5, 5/6), k0_list = 14)
b_estim_train <- estimate_b_list(df, H0_list = H_estim, L0_list = L_estim, sigma = sigma_estim)
b_estim <- estimate_b_list(df_test, H0_list = H_estim, L0_list = L_estim, sigma = sigma_estim)
View(b_estim)
df_test_smooth <- df_test %>% map2(b_estim, ~ estimate_curve(.x, U = .x$t, b = .y, t0_list = c(1/6, 0.5, 5/6)))
smooth_curves
b_estim_train <- estimate_b_list(df, H0_list = H_estim, L0_list = L_estim, sigma = sigma_estim) %>%
purrr::transpose() %>%
purrr::map(~ unname(unlist(.x)))
b_estim <- estimate_b_list(df_test, H0_list = H_estim, L0_list = L_estim, sigma = sigma_estim) %>%
purrr::transpose() %>%
purrr::map(~ unname(unlist(.x)))
df_test_smooth <- df_test %>% map2(b_estim, ~ estimate_curve(.x, U = .x$t, b = .y, t0_list = c(1/6, 0.5, 5/6)))
plot(df_test[[1]]$t, df_test[[1]]$x)
lines(df_test[[1]]$t, df_test[[1]]$x_true, col = 'red')
lines(df_test_smooth[[1]]$t, df_test_smooth[[1]]$x, col = 'blue')
#### Setting 3
df <- generate_integrate_fractional_brownian(1000, 1000, 0.7, 0.05)
df_test <- generate_integrate_fractional_brownian(1000, 1000, 0.7, 0.05)
plot(df_test[[1]]$t, df_test[[1]]$x)
lines(df_test[[1]]$t, df_test[[1]]$x_true, col = 'red')
estimate_H0_deriv_list
H_estim <- estimate_H0_deriv_list(df, t0_list = 0.5, eps = 0.03, k0_list = 14)
1000 * exp(- log(log(1000))**2)
H_estim <- estimate_H0_deriv_list(df, t0_list = 0.5, eps = 0.03, k0_list = 24)
devtools::install_github("StevenGolovkine/denoisr")
library(denoist)
library(denoisr)
1 / log(1000)**2
H_estim <- estimate_H0_deriv_list(df, t0_list = 0.5, eps = 0.02, k0_list = 24)
365**(1/5)
library(denoisr)
365 * exp(-log(log(365))**2)
1440 * exp(-log(log(1440))**2)
512 * exp(-log(log(512))**2)
2**4
2*88
2**8
2**5
install.packages('cubt')
library(fda)
growth
data("growth")
growth$hgtm
library(tidyverse)
a <- bind_cols(growth$hgtm, growth$hgtf)
a <- bind_cols(tibble(growth$hgtm), tibble(growth$hgtf))
tibble(growth$hgtm)
as_tibble(growth$hgtm)
a <- bind_cols(as_tibble(growth$hgtm), as_tibble(growth$hgtf))
View(a)
growth$age
write_csv(a, './growth.csv')
install.packages('funHDDC')
library(funHDDC)
trigo
a <- CanadianWeather
a$geogindex
a$geogindex
a$coordinates
library(readr)
write_csv(a$coordinates, './weather_location.csv')
as.data.frame()a$coordinates)
as.data.frame(a$coordinates)
write_csv(as.data.frame(a$coordinates), './weather_location.csv')
write_csv(as.data.frame(a$coordinates), './weather_location.csv', col_names = TRUE)
as.data.frame(a$coordinates)
as_data_frame(a$coordinates)
library(tidyverse)
as_tibble(a$coordinates)
as_data_frame(a$coordinates)
as.data.frame(a$coordinates)
install.packages('coronavirus')
library(coronavirus)
data("coronavirus")
View(coronavirus)
library(tidyverse)
qnorm(0.975)
qnorm(0.975) / sqrt(50)
qnorm(0.975) / sqrt(500)
sqrt(50)
qnorm(0.975) / sqrt(100)
library(fda)
install.packages('IRKernel')
IRkernel::installspec()
################################################################################
# Test of different functional clustering algorithms
setwd('./Documents/workspace/Tests/clustering/')
setwd("~/Documents/workspace/fcubt/canadian_weather")
# Load pacakges
library(denoisr)
library(fda)
library(funHDDC)
library(tidyverse)
# Load data
argvals_A <- seq(0, 1, length.out = 365)
values_A <- as.matrix(read.csv('./data/canadian_temperature_daily_reduced.csv', header = FALSE))
argvals_B <- seq(0, 1, length.out = 364)
values_B <- as.matrix(read.csv('./data/canadian_precipitation_daily_reduced.csv', header = FALSE))
# FunHDDC
basis <- create.fourier.basis(c(0, 1), nbasis=65)
data_fd_A_smooth <- smooth.basis(argvals = argvals_A, y = t(values_A), fdParobj = basis)$fd
data_fd_B_smooth <- smooth.basis(argvals = argvals_B, y = t(values_B), fdParobj = basis)$fd
plot(data_fd_A_smooth)
plot(data_fd_B_smooth)
data_fd = list(data_fd_A_smooth, data_fd_B_smooth)
res <- funHDDC(data_fd, K = 2:10, model = c('AkjBkQkDk', 'AkjBQkDk', 'AkBkQkDk',
'ABkQkDk', 'AkBQkDk', 'ABQkDk'), init = 'random')
pred_labels <- res$class
# Save results
saveRDS(pred_labels, file = './results/results_weather_funhddc.rds')
# Load packages
library(fda)
library(Funclustering)
library(tidyverse)
# Load data
argvals_A <- seq(0, 1, length.out = 365)
values_A <- as.matrix(read.csv('./data/canadian_temperature_daily_reduced.csv', header = FALSE))
argvals_B <- seq(0, 1, length.out = 364)
values_B <- as.matrix(read.csv('./data/canadian_precipitation_daily_reduced.csv', header = FALSE))
# Perform Funclust
basis <- create.fourier.basis(c(0, 1), nbasis = 65)
data_fd_A_smooth <- smooth.basis(argvals = argvals_A, y = t(values_A), fdParobj = basis)$fd
data_fd_B_smooth <- smooth.basis(argvals = argvals_B, y = t(values_B), fdParobj = basis)$fd
data_fd = list(data_fd_A_smooth, data_fd_B_smooth)
res_funclust <- list()
for(i in seq(1, 10, 1)){
res_funclust[i] <- list(funclust(data_fd, K = i, increaseDimension = TRUE))
}
res_funclust %>% map_dfr(~ filter(.x, .x$ARI == max(.x$ARI))[1, ])
res_funclust %>% map(~ .x$bic)
# Larger BIC
res_funclust %>% map_dbl(~ .x$bic)
# Larger BIC
bic_idx <- which.max(res_funclust %>% map_dbl(~ .x$bic))
pred_labels <- res_funclust[[bic_idx]]$cls
pred_labels
# Save results
saveRDS(pred_labels, file = './results/results_weather_funclust.rds')
